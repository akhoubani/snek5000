from io import StringIO


def test_init(oper):
    print(oper.produce_str_describing_oper())
    print(oper.produce_long_str_describing_oper())


def test_properties(oper):
    assert oper.max_n_seq == 1024
    assert oper.max_n_loc == 171


def test_box_template(oper):
    from phill.templates import box

    oper.write_box(box, comments=__name__)


def test_box_2d(oper2d, jinja_env):
    box = jinja_env.get_template("box.j2")
    with StringIO() as buffer:
        oper2d.write_box(box, fp=buffer, comments=__name__)

        assert (
            buffer.getvalue()
            == """\
-2                                         spatial dimension (dim<0 will create box.re2)
2                                          number of fields
#========================================================
#
#    test_oper
#    Autogenerated using snek5000.operators.Operators.write_box()
#    
#    If dim < 0 .re2 file will be generated
#    
#    If nelx (y or z) < 0, then genbox automatically generates the
#                          grid spacing in the x (y or z) direction
#                          with a geometric ratio given by "ratio".
#                          ( ratio=1 implies uniform spacing )
#    
#    Note that the character bcs _must_ have 3 spaces.
#
#========================================================
#
Box
-16 -16                                   nelx nely nelz
0.0000 1.0000 1.0000                      x0 x1 ratio
0.0000 1.0000 1.0000                      y0 y1 ratio
W  ,W  ,W  ,W                             Velocity BCs
t  ,t  ,I  ,I                             Temperature / scalar BCs
"""  # noqa
        )


def test_size_template(sim):
    from phill.templates import size

    sim.oper.write_size(size, comments=__name__)


def test_sim_path_run(sim):
    params = sim.params
    assert params.oper.Lx == params.oper.Ly == params.oper.Lz == 1.0
    assert sim.oper.produce_str_describing_oper() in sim.name_run
